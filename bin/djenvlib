#
# django-environments initialization script
#
# Instead of editing the file, it's better to set the variable
# $PROJECT_ROOT in your own initenv script or virtualenv bin/postactivate,
# and then source this file.
#
# $PROJECT_ROOT is the path to the root of the *entire* project, i.e.
# the directory containing one or more 'Django projects', for example:
#
# PROJECT_ROOT=/Users/spanky/projects/myproject

# Not to be called directly, see djenv below
function _djenv_init() {
    DJANGO_PROJECT=$1
    DJANGO_SETTINGS=$2

    # The root of the project should exist, of course
    [ -z "$PROJECT_ROOT" ] && \
        echo "Variable \$PROJECT_ROOT not set or empty" 1>&2 && return 1
    [ ! -d "$PROJECT_ROOT" ] && \
         echo "Variable \$PROJECT_ROOT does not point to a readable directory" 1>&2 && return 1

    # Check Django project as well
    [ -z "$DJANGO_PROJECT" ] && \
        echo "Argument \$DJANGO_PROJECT not set or empty" 1>&2 && return 1
    [ ! -d "$PROJECT_ROOT/$DJANGO_PROJECT" ] && \
        echo "Argument \$DJANGO_PROJECT does not identify a readable directory within $PROJECT_ROOT" 1>&2 && \
        return 1

    # If no particular settings are defined, just use the "base" settings
    _OLD_DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
    if [ ! -z "$DJANGO_SETTINGS" ]; then
        DJANGO_SETTINGS_MODULE=$DJANGO_PROJECT.$DJANGO_SETTINGS
    else
        DJANGO_SETTINGS_MODULE=$DJANGO_PROJECT.settings
    fi

    # Set the PYTHONPATH to include PROJECT_ROOT
    _OLD_PYTHONPATH=$PYTHONPATH
    PYTHONPATH=$PROJECT_ROOT:$PROJECT_ROOT/lib:$PYTHONPATH

    export PROJECT_ROOT DJANGO_PROJECT PYTHONPATH DJANGO_SETTINGS_MODULE

    # Test settings import
    python -c "import $DJANGO_SETTINGS_MODULE" > /dev/null 2>&1
    if [ ! "$?" -eq 0 ]; then
        echo "Error importing settings $DJANGO_SETTINGS_MODULE (PYTHONPATH: $PYTHONPATH)" 1>&2
        python -c "import $DJANGO_SETTINGS_MODULE"
        return 1
    fi

    # Test if the definitions in the settings match ours
    if [ ! -z "`get_django_setting :`" ]; then
        echo "Current Django settings generate output - debugging print statements maybe?" 1>&2
    else
        [ "$PROJECT_ROOT" != "`get_django_setting PROJECT_ROOT`" ] && \
            echo "\$PROJECT_ROOT in Django settings is different from shell" 1>&2 && \
            echo "\$PROJECT_ROOT: $PROJECT_ROOT" 1>&2 && \
            echo "settings.PROJECT_ROOT: `get_django_setting PROJECT_ROOT`" 1>&2 && \
            return 1
        [ "$DJANGO_PROJECT" != "`get_django_setting DJANGO_PROJECT`" ] && \
            echo "\$DJANGO_PROJECT in Django settings is different from shell" 1>&2 && \
            return 1
        [ "$PROJECT_ROOT/$DJANGO_PROJECT" != "`get_django_setting DJANGO_PROJECT_DIR`" ] && \
            echo "\$DJANGO_PROJECT_DIR in Django settings is different from \$PROJECT_ROOT/\$DJANGO_PROJECT" 1>&2 && 
            return 1
    fi

    # We're good - let's set the prompt
    _OLD_DJENV_PS1=$PS1
    PS1=[$DJANGO_PROJECT]$PS1

    # Show environment info
    if [ "$SHOW_DJANGO_ENVIRONMENT" = "yes" ]; then
        echo Welcome to $DJANGO_PROJECT. Environment info:
        djenv
    fi

    # Check non-critical settings
    local dirs dir
    for dirs in TEMPLATE_DIRS FIXTURE_DIRS; do
        eval `import_django_settings $dirs`
        envname=DJANGO_$dirs
        for dir in ${!envname}; do
            [ ! -d $dir ] && echo "Warning: \"$dir\" in settings.$dirs is not a valid directory" 1>&2
        done
    done

    return 0
}

# Register cleanup hook
function _djenv_register_cleanup() {
    local func
    for func in $*; do
        if [ -z "$DJENV_CLEANUP_FUNCTIONS" ]; then
            DJENV_CLEANUP_FUNCTIONS=$func
        else
            DJENV_CLEANUP_FUNCTIONS=$DJENV_CLEANUP_FUNCTIONS:$func
        fi
    done
}

# Verification functions

# Check if $PROJECT_ROOT is set
function _verify_project_root() {
    [ -z "$PROJECT_ROOT" ] && echo "No \$PROJECT_ROOT" 1>&2 && return 1
    return 0
}

# Check if $DJANGO_PROJECT is set
function _verify_django_project() {
    [ -z "$DJANGO_PROJECT" ] && echo "No \$DJANGO_PROJECT" 1>&2 && return 1
    return 0
}

# Check if both $PROJECT_ROOT and $DJANGO_PROJECT are set
function _verify_project_root_and_django_project() {
    _verify_project_root || return 1
    _verify_django_project || return 1
    return 0
}

# Check if $DJANGO_SETTINGS_MODULE is set
function _verify_django_settings_module() {
    [ -z "$DJANGO_SETTINGS_MODULE" ] && echo "No \$DJANGO_SETTINGS_MODULE" 1>&2 && return 1
    return 0
}

# Some useful functions

# Exit current project
function djexit() {
    [ -z "$DJANGO_PROJECT" ] && return 1

    # Restore prompt
    if [ ! -z "$_OLD_DJENV_PS1" ]; then
        PS1=$_OLD_DJENV_PS1
        unset _OLD_DJENV_PS1
    fi

    # Restore django settings
    if [ ! -z "$_OLD_DJANGO_SETTINGS_MODULE" ]; then
        DJANGO_SETTINGS_MODULE=$_OLD_DJANGO_SETTINGS_MODULE
    else
        unset DJANGO_SETTINGS_MODULE
    fi

    # Restore python path
    if [ ! -z "$_OLD_PYTHONPATH" ]; then
        PYTHONPATH=$_OLD_PYTHONPATH
    else
        unset PYTHONPATH
    fi

    # Call the registerd cleanup functions
    _IFS=$IFS
    IFS=:
    local func
    for func in $DJENV_CLEANUP_FUNCTIONS; do
        $func
    done
    IFS=$_IFS
}

# Change django project
# Example:
# djenv # Print current environment settings
# or
# djenv mysite # Use default settings
# or
# djenv mysite settings.env.local # Use specific settins
function djenv() {
    # Environment info
    if [ -z "$1" ]; then
        echo PROJECT_ROOT: \'$PROJECT_ROOT\'
        echo DJANGO_PROJECT: \'$DJANGO_PROJECT\'
        echo DJANGO_SETTINGS_MODULE: \'$DJANGO_SETTINGS_MODULE\'
        echo PYTHONPATH: \'$PYTHONPATH\'
        return
    fi

    # Help
    if [ "$1" = "-h" -o "$1" = "--help" ]; then
        echo "Usage: djenv [DJANGO_PROJECT [DJANGO_SETTINGS]]"
        return
    fi

    # Check $PROJECT_ROOT
    if [ -z "$PROJECT_ROOT" ]; then
        echo "Variable \$PROJECT_ROOT not set or empty" 1>&2
        return 1
    fi

    # Exit current environment (if any)
    djexit

    # Initialize
    _djenv_init $*

    # On error, use djexit for cleanup
    [ ! $? -eq 0 ] && djexit && return 1

    # Change working directory
    cdjango

    return 0
}

# Get a django setting from the current or specified settings module
#
# Example:
# LC=`get_django_setting LANGUAGE_CODE` && echo $LC
#
# Returns the second argument if setting cannot be found. Be aware
# that the settings file should not print anything to stdout for
# this to work!
function get_django_setting() {
    _verify_project_root || return 1
    [ -z "$1" ] && echo "Usage: get_django_setting <setting-name> [default-value] [settings-module]" 1>&2 && return 1

    local settings_module
    if [ ! -z "$3" ]; then
        settings_module=$3
    else
        _verify_django_settings_module || return 1
        settings_module=$DJANGO_SETTINGS_MODULE
    fi
    python << EOF
try:
    import $settings_module as settings
except ImportError:
    print '$2'
    raise
else:
    try:
        print settings.__dict__['$1']
    except KeyError:
        print '$2'
EOF
}

# Import django settings into the shell environment
# Experimental.
#
# When using, set $IFS to empty (this is needed because we eval
# the output of the python-generated shell script code):
# IFS=''
#
# Then use the function as follows:
# eval `import_django_settings` # all settings
# or
# eval `import_django_settings ADMIN` # all settings starting with 'ADMIN'
#
# Tuples and lists items are separated with newlines, so set $IFS
# to newline to get to those:
# IFS='
# '
# Note that all variables are prefixed with value of $prefix, 'DJANGO_'.
function import_django_settings() {
    _verify_project_root || return 1
    _verify_django_settings_module || return 1

    prefix=DJANGO_
    python << EOF
import $DJANGO_SETTINGS_MODULE as settings
from types import TupleType, ListType, DictType

def escape(value):
    return str(value).replace('"', '\\\\"')

settings = settings.__dict__.items()
settings.sort()
for name, value in settings:
    if name.find('__') == -1 and name.find('$1') == 0:
        if type(value) in (TupleType, ListType):
            print '$prefix%s="' % name
            for item in value:
                print escape(item)
            print '"'
        elif type(value) == DictType:
            print '$prefix%s="' % name
            for name, value in value.items():
                print '%s:%s' % (name, escape(value))
            print '"'
        else:
            print '$prefix%s="%s"' % (name, escape(value))
EOF
}

# Set the project root to either current or specified directory
setproject() {
    if [ ! -z "$1" ]; then
        cd $1
        [ ! $? -eq 0 ] && return 1
    fi
    djexit
    export PROJECT_ROOT=`pwd`

    local projects=`show_django_projects`
    if [ ! -z "$projects" ]; then
        echo "Available Django projects (use the djenv command to select):" 1>&2
        echo $projects 1>&2
    else
        echo "Warning: no django projects found" 1>&2
    fi
}

# Change directory to project root
function cdroot() {
    _verify_project_root || return 1

    cd $PROJECT_ROOT/$1
}

# Change directory to project lib directory
function cdlib() {
    _verify_project_root || return 1

    cd $PROJECT_ROOT/lib/$1
}

# Install dependencies for a python environment (first argument);
# the file with the dependencies should be in the requirements
# directory and should have the format 'libs-<environment>.txt'
function pipup() {
    _verify_project_root || return 1
    [ -z "$1" ] && echo "Usage: pipup <requirements-identifier> [pip options]" 1>&2 && return 1

    local requirements=$1
    shift
    pip install --requirement=$PROJECT_ROOT/requirements/libs-$requirements.txt $*
}

# Use compileall to compile all .py files - handy for web server
# environments where the server user often has no write access to the
# .pyc files / directories
function pycompile() {
    _verify_project_root || return 1

    python -c "import compileall; compileall.compile_dir('$PROJECT_ROOT')"
    removeorphanpycs
}

# Remove .pyc files without a corresponding .py the fast way
function removeorphanpycs() {
    _verify_project_root || return 1

    # Use the GNU extension --no-run-if-empty on Linux, in case no files are found
    if [ `uname` = Linux ]; then
        local extra_xargs_args=--no-run-if-empty
    fi

    # Pipe through bash because this implementation uses process substitution,
    # and you don't want to export functions using that since /bin/sh will choke
    # on them with a syntax error because process substitution is not available in
    # POSIX mode
    echo "diff --old-line-format= --new-line-format=%L --unchanged-group-format= \
        <(find -H $PROJECT_ROOT -name \*.py | sort) \
        <(find -H $PROJECT_ROOT -name \*.pyc | sed 's/c$//' | sort) | \
        sed 's/$/c/' | xargs $extra_xargs_args rm -v" | bash
}

# Remove all directories in the project that contain the specified file
# Experimental.
function cleanupdirs() {
    [ -z "$1" ] && echo "Usage: cleanupdirs <filename>" 1>&2 && return 1

    local file=$1

    # Use the GNU extension --no-run-if-empty on Linux, in case no files are found
    if [ `uname` = Linux ]; then
        local extra_xargs_args=--no-run-if-empty
    fi

    for dir in `find $PROJECT_ROOT -type f -name $file | \
                xargs -n 1 $extra_xargs_args dirname`; do
        if [ `ls -a $dir | grep -v $file | wc -l` = 2 ]; then
            rm $dir/$file
            rmdir $dir
        fi
    done
}

# Remove all empty directories in the project
function removeemptydirs() {
    _verify_project_root || return 1

    # Make directories as empty as possible
    removeorphanpycs
    cleanupdirs .DS_Store
    # Then remove the totally empty ones
    find $PROJECT_ROOT -type d -empty -delete
}

# Change directory to Django project
function cdjango () {
    _verify_project_root_and_django_project || return 1

    cd $PROJECT_ROOT/$DJANGO_PROJECT/$1
}

# Forget manage.py, django-admin.py respects our settings!
function djadmin() {
    _verify_project_root || return 1

    django-admin.py $*
}

# Get network IP address
function get_network_ip() {
    python << EOF
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.connect(('google.com', 80))
print s.getsockname()[0]
EOF
}

# Run development server on settings.LOCAL_SERVER_PORT, and restart
# automatically. With -p as first argument, the server listens to
# the network IP address instead of localhost.
function runserver() {
    _verify_project_root_and_django_project || return 1

    if [ "$1" = -p ]; then
        local ip=`get_network_ip`:
        shift
    fi
    local port=`get_django_setting LOCAL_SERVER_PORT 8000`

    while true; do
        django-admin.py runserver $ip$port $*
        echo "Server exited - restarting" 1>&2
        sleep 1
    done
}

# Run test server on settings.LOCAL_SERVER_PORT, and restart automatically
function testserver() {
    _verify_project_root_and_django_project || return 1

    local port=`get_django_setting LOCAL_SERVER_PORT 8000`
    django-admin.py testserver --addrport=$port $*
}

# Open an URL in the default browser
function open_url() {
    if which xdg-open > /dev/null; then
        # Linux
        xdg-open "$@"
    else
        # Mac OS
        open "$@"
    fi
}

# Points the browser to the server running the current settings:
# http://localhost:<settings.LOCAL_SERVER_PORT>/$1
function djbrowse() {
    _verify_project_root_and_django_project || return 1
    _verify_django_settings_module || return 1

    local port=`get_django_setting LOCAL_SERVER_PORT 8000`
    open_url http://localhost:$port/$1
}

# Points the browser to the named virtual host for the current
# settings. Assumes Apache is running as reverse proxy; see
# create_apache_vhoste_conf.sh for more information.
function djvirtualbrowse() {
    _verify_project_root_and_django_project || return 1
    _verify_django_settings_module || return 1

    local domain=local
    [ ! -z "$DOMAIN" ] && domain=$DOMAIN
    local django_settings_id=`echo $DJANGO_SETTINGS_MODULE | sed 's#.*\\.##'`

    open_url http://$django_settings_id.$DJANGO_PROJECT.$domain/$1
}

# Export functions so they can be used in shell scripts
export -f _verify_project_root _verify_django_project \
    _verify_project_root_and_django_project _verify_django_settings_module \
    get_django_setting import_django_settings cdroot cdlib pipup \
    pycompile removeorphanpycs cleanupdirs removeemptydirs \
    cdjango djadmin get_network_ip runserver testserver djbrowse

# Clean up the environment
function _djenv_cleanup () {
    unset DJANGO_PROJECT DJANGO_SETTINGS \
        _OLD_DJANGO_SETTINGS_MODULE _OLD_PYTHONPATH \
        DJANGO_TEMPLATE_DIRS DJANGO_FIXTURE_DIRS
}

# Use _djenv_register_cleanup to register your own cleanup functions
_djenv_register_cleanup _djenv_cleanup

#
# Tab completion
#

function show_django_projects() {
    _verify_project_root || return 1

    (
        cd $PROJECT_ROOT
        shopt -s nullglob
        for file in */settings/__init__.py; do
            echo $file
        done
    ) | sed 's#/settings/__init__.py##' | sort
}

function show_django_settings() {
    _verify_project_root || return 1

    (
        cd $PROJECT_ROOT/$1
        shopt -s nullglob
        for file in settings/env/*.py; do
            echo $file
        done
    ) | grep -v '/__init__.py$' | sed 's#settings/env/#settings.env.#' | \
        sed 's#\.py$##' | sort
}

_django_projects_complete() {
    local current="${COMP_WORDS[COMP_CWORD]}"
    local previous="${COMP_WORDS[COMP_CWORD - 1]}"

    if [ $COMP_CWORD -eq 1 ]; then
        COMPREPLY=($(compgen -W "`show_django_projects`" -- ${current}))
    elif [ $COMP_CWORD -eq 2 ]; then
        COMPREPLY=( $(compgen -W "`show_django_settings $previous`" -- ${current}) )
    fi
}

_cdroot_complete() {
    _verify_project_root || return 1

    COMPREPLY=($(cdroot && compgen -d -- "${2}"))
}

_cdlib_complete() {
    _verify_project_root || return 1

    COMPREPLY=($(cdlib && compgen -d -- "${2}"))
}

_cdjango_complete() {
    _verify_django_project || return 1

    COMPREPLY=($(cdjango && compgen -d -- "${2}"))
}

function show_pip_environments() {
    _verify_project_root || return 1

    (
        cd $PROJECT_ROOT/requirements
        shopt -s nullglob
        for file in libs-*.txt; do
             echo $file
        done
    ) | sed 's#libs-##' | sed 's#.txt##' | sort
}

_pipup_complete() {
    _verify_project_root || return 1

    COMPREPLY=($(compgen -W "`show_pip_environments`" -- "${2}" ))
}

complete -o nospace -F _cdroot_complete -S/ cdroot
complete -o nospace -F _cdlib_complete -S/ cdlib
complete -o nospace -F _cdjango_complete -S/ cdjango
complete -F _django_projects_complete djenv
complete -F _pipup_complete pipup
